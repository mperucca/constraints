package constraints

/**
 * A type class for data types that produce iterables. Abstracting over this type instead of [[Iterable]] means that
 * compile time checked constraints on iterable-like constant types can more easily be preserved.
 * @tparam I the type that generates an [[Iterable]]
 * @tparam A the type generated by the [[Iterable]]
 */
trait Iterate[-I, +A]:

  /**
   * Get the iterable
   * @param i the value that can be iterated over
   * @return the iterable
   */
  def iterable(i: I): Iterable[A]

  extension (i: I)

    /**
     * Alternative method that forwards to [[iterable]]
     */
    def toIterable: Iterable[A] = iterable(i)

/**
 * Contains various [[Iterate]] type class instances
 */
object Iterate:

  /**
   * The type class instance of [[Iterate]] for tuples of the lowest upper bound of their type union
   */
  given [T <: Tuple, A](using Tuple.Union[T] <:< A): Iterate[T, A] with
    override def iterable(tuple: T): Iterable[A] = new Iterable[A]:
      override def iterator: Iterator[A] = tuple.productIterator.asInstanceOf[Iterator[A]]

  /**
   * The type class instance of [[Iterate]] for [[Iterable]]s
   * @tparam A the type of items in the [[Iterable]]
   * @return the type class instance of [[Iterate]] for [[Iterable]]s
   */
  given [A]: Iterate[Iterable[A], A] = identity(_)

  /**
   * The type class instance of [[Iterate]] for [[String]]s
   * @return the type class instance of [[Iterate]] for [[String]]s
   */
  given Iterate[String, Int] = string =>
    new Iterable[Int]:
      override def iterator: Iterator[Int] = new Iterator[Int]:
        val it: java.util.PrimitiveIterator.OfInt = string.codePoints().iterator()
        override def hasNext: Boolean = it.hasNext
        override def next(): Int = it.nextInt()

